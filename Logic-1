//cigar-Party
public boolean cigarParty(int cigars, boolean isWeekend) {
  if(isWeekend==true){
    if(cigars>=40){
      return true;
    }
    else{
      return false;
    }
  }
  else{
    if(cigars>=40 && cigars<=60){
      return true;
    }
    else{
      return false;
    }
  }
}
//dateFashion
public int dateFashion(int you, int date) {
	  if ((you >= 8 && date > 2) || (date >= 8 && you > 2))
	    return 2;
	  if (you <= 2 || date <= 2)
	    return 0;
	  else
	    return 1;
	}
  //
  public boolean squirrelPlay(int temp, boolean isSummer) {
  if(isSummer==true){
    if(temp>=60 && temp<=100){
      return true;
    }
    else{
      return false;
    }
  }
  else{
    if(temp>=60 && temp<=90){
      return true;
    }
    else{
      return false;
    }
  }
}
//caughtSpeeding
public int caughtSpeeding(int speed, boolean isBirthday) {
  if(!isBirthday){
    if(speed<=60){
      return 0;
    }
    else if(speed>=61 && speed <=80){
      return 1;
    }
    else{
      return 2;
    }
  }
  else{
    if(speed<=65){
      return 0;
    }
    else if(speed>=65 && speed <=85){
      return 1;
    }
    else{
      return 2;
    }
  }
}
//sortSum
public int sortaSum(int a, int b) {
  int sum=a+b;
  if(sum>=10 && sum<=19){
    return 20;
  }
  else{
    return sum;
  }
}
//alarmClock
public String alarmClock(int day, boolean vacation) {
  if(!vacation){
    if(day>=1 && day<=5){
      return "7:00";
    }
    else{
      return "10:00";
    }
  }
  else{
    if(day>=1 && day<=5){
      return "10:00";
    }
    else{
      return "off";
    }
  }
}
//love6
public boolean love6(int a, int b) {
  if(a==6 || b==6){
    return true;
  }
  else{
    if(a+b==6 || Math.abs(a-b)==6){
      return true;
    }
    else{
      return false;
    }
  }
}
//in1To10 
public boolean in1To10(int n, boolean outsideMode) {
  if(!outsideMode){
    return n>=1 && n<=10;
  }
  else{
    return n<=1 || n>=10;
  }
}
//specialEven
public boolean specialEleven(int n) {
  if(n%11==0 || (n-1)%11==0){
    return true;
  }
  else{
    return false;
  }
}
//more20
public boolean more20(int n) {
 if(n%20==1 || n%20==2){
   return true;
 }
  return false;
}
//old35
public boolean old35(int n) {
 if(n%3==0 && n%5==0){
    return false;
  }
 else if(n%3==0 && n%5!=0){
   return true;
 }
 else if(n%3!=0 && n%5==0){
   return true;
 }
  else{
    return false;
  }
}
//less20
public boolean less20(int n) {
  if((n+1)%20==0 || (n+2)%20==0){
    return true;
  }
  else{
    return false;
  }
}
//nearTen
public boolean nearTen(int num){
if(num%10<3 || num %10>=8)
 return true;
else 
 return false;
 }
 //teenSum 
public int teenSum(int a, int b) {
  int sum=a+b;
  if( (a>=13 && a<=19) || (b>=13 && b<=19) ){
    return 19;
  }
  else{
    return sum;
  }
}
//answerCell 
public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep) {
  if(isAsleep){
    return false;
  }
  if(isMorning && isMom || !isMorning){
    return true;
  }
  return false;
}
//teaParty 
public int teaParty(int tea, int candy) {
 if(tea<5|| candy<5){
   return 0;
 }
  if(tea>=2*candy || candy>=2*tea){
   return 2;
 }
 else {
   return 1;
 }
}
//fizzString
public String fizzString(String str) {
  boolean fizz=str.charAt(0)=='f';
  boolean buzz = str.charAt(str.length()-1)=='b';
  
  if(fizz && buzz){
    return "FizzBuzz";
  }
  if(fizz){
    return "Fizz";
  }
  if(buzz){
    return "Buzz";
  }
  return str;
}
//Logic-1 > fizzString2 
public String fizzString2(int n) {
  if(n%3==0 && n%5!=0){
    return "Fizz!";
  }
  else if(n%5==0 && n%3!=0){
    return "Buzz!";
  }
  else if(n%3==0 && n%5==0){
    return "FizzBuzz!";
  }
  else{
    return String.valueOf(n)+"!";
  }
}
//twoAsOne
public boolean twoAsOne(int a, int b, int c) {
  int suma=b+c;
  int sumb=a+c;
  int sumc=b+a;
  
  if(suma==a){
    return true;
  }
  else if(sumb==b){
    return true;
  }
  else if(sumc==c){
    return true;
  }
  else{
    return false;
  }
}
//inOrder
public boolean inOrder(int a, int b, int c, boolean bOk) {
  if(bOk){
    if(c>b){
      return true;
    }
    else {
      return false;
    }
  }
  if(b>a && c>b){
    return true;
  }
  else{
    return false;
  }
}
//inOrderEqual
public boolean inOrderEqual(int a, int b, int c, boolean equalOk) {
  if(equalOk){
    if(a<=b && b<=c){
      return true;
    }
    else{
      return false;
    }
  }
  else{
    if(a<b && b<c){
      return true;
    }
    else{
      return false;
    }
  }
}
//lastDigit 
public boolean lastDigit(int a, int b, int c) {
  int digita=a%10;
  int digitb=b%10;
  int digitc=c%10;
  
  boolean aIsEqualtob=(digita==digitb);
  boolean bIsEqualtoc=(digitb==digitc);
  boolean cIsEqualtoa=(digitc==digita);
  
  if(aIsEqualtob){
    return true;
  }
  else if(bIsEqualtoc){
    return true;
  }
  else if(cIsEqualtoa){
    return true;
  }
  return false;
}
//lessBy10
public boolean lessBy10(int a, int b, int c) {
	  int high = Math.max(a,b);
	  high = Math.max(high, c);
	  if (high - a >= 10 || high - b >= 10 || high - c >=10)
	  return true;
	  else
	  return false;
}
///withoutDoubles
public int withoutDoubles(int die1, int die2, boolean noDoubles) {
  if(noDoubles){
    if(die1==die2){
      if(die1==6){
        return die1+1;
      }
      else{
        return die1+die2+1;
      }
    }
    else{
      return die1+die2;
    }
  }
  else{
    return die1+die2;
  }
}
//max mod
public int maxMod5(int a, int b) {
  if (a == b)
	    return 0;
	if (a % 5 == b % 5)
	    return Math.min(a,b);
	 
	return Math.max(a,b);
  
}
//redticket
public int redTicket(int a, int b, int c) {
	  if (a == 2 && b == 2 && c == 2)
	    return 10;
	  if ( a == b && b == c)
	    return 5;
	  if ( a != b && a != c)
	    return 1;
	  else
	    return 0;
}
//blue ticket
public int blueTicket(int a, int b, int c) {
  int sumab=a+b;
  int sumbc=b+c;
  int sumca=a+c;
  
  if(sumab==10 || sumbc==10 || sumca==10)
   return 10;
  if(sumab-sumbc==10 || sumab-sumca==10)
   return 5;
   
  return 0;
}
//green ticket
public int greenTicket(int a, int b, int c) {
  if(a==b && b==c){
    return 20;
  }
  if(a==b || b==c || c==a){
    return 10;
  }
  return 0;
}


//shareDigit
public boolean shareDigit(int a, int b) {
  int moda=a%10;
  int modb=b%10;
  int diva=a/10;
  int divb=b/10;
  
  if(moda==modb || moda==divb || diva==modb || diva==divb)
   return true;
  else
   return false;
}
//sumLimit
public int sumLimit(int a, int b) {
  int sum=a+b;
  String sumLength=String.valueOf(sum);
  String aLength=String.valueOf(a);
  
  if(sumLength.length()==aLength.length()){
    return sum;
  }
  else{
    return a;
  }
}
