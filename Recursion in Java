//1. Factorial
public int factorial(int n) {
  if(n<0)n=-n;
  
  if(n==0 || n==1){
    return 1;
  } 
  return n*factorial(n-1);
}
//2.  bunnyEars
public int bunnyEars(int bunnies) {
  if(bunnies==0){
    return 0;
  }
  else return 2+bunnyEars(bunnies-1);
}
//3. fibonacci
public int fibonacci(int n) {
  if(n==0){
    return 0;
  }
  if(n==1) return 1;
  return fibonacci(n-1)+fibonacci(n-2);
}
//4.bunnyEars2 
public int bunnyEars2(int bunnies) {
  if(bunnies==0)return 0;
  if(bunnies==1) return 2;
  else if(bunnies%2==0) return 3+bunnyEars2(bunnies-1);
  else return 2+bunnyEars2(bunnies-1);
}
//5.triangle
public int triangle(int rows) {
  if(rows==0){
    return 0;
  }
  else if(rows==1){
    return 1;
  }
  else{
    return rows+triangle(rows-1);
  }
}
//6.sumDigits
public int sumDigits(int n) {
  if(n==0){
    return 0;
  }
  else{
    return n%10+sumDigits(n/10);
  }
}
//7. count7 
public int count7(int n) {
  if(n==0){
    return 0;
  }
  else if(n%10==7){
    return 1+count7(n/10);
  }
  else{
    return count7(n/10);
  }
}
//8.count8
public int count8(int n) {
  if(n==0){
    return 0;
  }
  else if(n%10==8){
    int count=1;
    int temp=n/10;
    if(temp%10==8){
      return (count+1)+count8(n/10);
    }
    else{
      return 1+count8(n/10);
    }
  }
  else{
    return count8(n/10);
  }
}
//9.powerN
public int powerN(int base, int n) {
  if(n==0){
    return 1; 
  }
  else{
    return base*powerN(base,n-1);
  }
}
//10.countX 
public int countX(String str) {
  if(str==null || str.length()==0){
    return 0;
  }
  if(str.length()==1){
    if(str.equalsIgnoreCase("x")){
      return 1;
    }
    else{
      return 0;
    }
  }
  else{
      
      String temp=str.substring(0,1);
      boolean isEqualtoX=temp.equalsIgnoreCase("x");
      if(isEqualtoX){
        return 1+countX(str.substring(1,str.length()));
      }
      else{
        return countX(str.substring(1,str.length()));
      }
  }
}
//11.countHi 
public int countHi(String str) {
  if(str==null || str.length()<2){
    return 0;
  }
  else if(str.length()==2){
      if(str.equals("hi")==true){
        return 1;
      }
      else{
        return 0;
      }
  }
  else{
      int len=str.length();
      String temp=str.substring(0,2);
      boolean equalsTohi=temp.equalsIgnoreCase("hi");
      if(equalsTohi){
        return 1+countHi(str.substring(1,len));
      }
      else{
        return countHi(str.substring(1,len));
      }
  }
  
}
//12.changeXY 
public String changeXY(String str) {
  if(str==null || str.length()==0){
    return "";
  }
  else if (str.charAt(0) == 'x')
  {
      return 'y' + changeXY(str.substring(1));
  }

    return str.charAt(0) + changeXY(str.substring(1));

}
//13.changePi 
public String changePi(String str) {
  if (str.equals("") || str.length() < 2) return str;
  if(str.charAt(0)=='p' && str.charAt(1)=='i'){
    return "3.14" + changePi(str.substring(2));
  }
  else{
    return str.charAt(0) + changePi(str.substring(1));
  }
}
//14.noX
public String noX(String str) {
  if(str.length()==0) return "";
  if(str.charAt(0)=='x') return noX(str.substring(1));
  else return str.charAt(0)+noX(str.substring(1));
}
//15.array6
public boolean array6(int[] nums, int index) {
  if(index>=nums.length) return false;
  if(nums[index]==6) return true;
  else return array6(nums,index+1);
}
//16.array11 
public int array11(int[] nums, int index) {
  if(index>=nums.length) return 0;
  if(nums[index]==11) return 1+array11(nums,index+1);
  else return array11(nums,index+1);
}
//17.array220 
public boolean array220(int[] nums, int index) {
  if(index>=nums.length-1)return false;
  if(nums[index+1]==10*nums[index])return true;
  else return array220(nums,index+1);
}
//18.allStar 
public String allStar(String str) {
  if(str.length()==0) return "";
  if(str.length()==1) return str;
  else return str.charAt(0)+"*"+allStar(str.substring(1));
}
//19.pairStar
public String pairStar(String str) {
  if(str.length()==0)return "";
  if(str.length()<2) return str;
  if(str.charAt(0)==str.charAt(1)) 
  return str.charAt(0)+"*"+pairStar(str.substring(1));
  else return str.charAt(0)+pairStar(str.substring(1));
}
//20.endX 
public String endX(String str) {
  if(str.length()==0) return "";
  if(str.length()==1) return str;
  if(str.charAt(0)=='x')return endX(str.substring(1))+str.charAt(0);
  else return str.charAt(0)+endX(str.substring(1));
}
//21.countPairs
public int countPairs(String str) {
  if(str.equals("")||str.length()<3) return 0;
  if(str.charAt(0)==str.charAt(2)) return 1+countPairs(str.substring(1));
  else return countPairs(str.substring(1));
}
//22.countAbc 
public int countAbc(String str) {
  if(str.equals("") || str.length()<3) return 0;
  
  if(str.charAt(0)=='a' && str.charAt(1)=='b' && str.charAt(2)=='c')
  return 1+countAbc(str.substring(3));
  
  if(str.charAt(0)=='a' && str.charAt(1)=='b' && str.charAt(2)=='a')
  return 1+countAbc(str.substring(1));
  
  else return countAbc(str.substring(1));
}
//23.count11 
public int count11(String str) {
  if(str.length()==0) return 0;
  if(str.length()==1) return 0;
  if(str.charAt(0)=='1' && str.charAt(1)=='1') return 1+count11(str.substring(2));
  else return count11(str.substring(1));
}
//24.stringClean 
public String stringClean(String str) {
  if(str.equals("") ||str.length()<2) return str;
  if(str.charAt(0)==str.charAt(1)) return stringClean(str.substring(1));
  else return str.charAt(0)+stringClean(str.substring(1));
}
//25.countHi2 
public int countHi2(String str) {
    if(str.length() <= 1)
        return 0;
          
    if(str.length() > 2 && str.substring(0, 3).equals("xhi"))
        return countHi2(str.substring(3));
                    
    if(str.substring(0, 2).equals("hi"))
        return 1 + countHi2(str.substring(2));
                            
    return countHi2(str.substring(1));
}
//26.parenBit
public String parenBit(String str) {
    if(str.charAt(0) == '(' && str.charAt(str.length()-1) == ')')
        return str;
          
    if(str.charAt(0) == '(')
        return parenBit(str.substring(0, str.length() - 1));
                    
    if(str.charAt(str.length() - 1) == ')')
        return parenBit(str.substring(1));
                              
    return parenBit(str.substring(1, str.length() - 1));
}
//27.nestParen
public boolean nestParen(String str) {
  if(str.length()==0)
    return true;
  
  if(str.charAt(0)=='(' && str.charAt(str.length()-1)==')')
     return nestParen(str.substring(1,str.length()-1));
  
  return false;
}
//28. strCount
public int strCount(String str, String sub) {
    if(str.length() < sub.length())
        return 0;
          
    if(str.substring(0, sub.length()).equals(sub))
        return 1 + strCount(str.substring(sub.length()), sub);
                    
    return strCount(str.substring(1), sub);
}
//29.strCopies
public boolean strCopies(String str, String sub, int n) {
   if(n == 0)
        return true;
  if(str.length() < sub.length())
        return false;
 
                  
    if(str.substring(0, sub.length()).equals(sub))
        return strCopies(str.substring(1), sub, n-1);
                            
    return strCopies(str.substring(1), sub, n);
}



