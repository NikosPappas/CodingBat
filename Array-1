//firstLast6 
public boolean firstLast6(int[] nums) {
  int len=nums.length-1;
  return nums[0]==6 || nums[len]==6;
}
//sameFirstLast
public boolean sameFirstLast(int[] nums) {
  int len=nums.length;
  return len>=1 && (nums[0]==nums[len-1]);
}
//makePi
public int[] makePi() {
  int[]a={3,1,4};
  return a;
}
//commonEnd
public boolean commonEnd(int[] a, int[] b) {
  return a[0]==b[0] || a[a.length-1]==b[b.length-1];
}
//Given an array of ints length 3, return the sum of all the elements.
public int sum3(int[] nums) {
  return nums[0]+nums[1]+nums[2];
}
//rotateLeft3
public int[] rotateLeft3(int[] nums) {
  int temp=nums[0];
  nums[0]=nums[1];
  nums[1]=nums[2];
  nums[2]=temp;
  
  return nums;
  }
  //reverser3
  public int[] reverse3(int[] nums) {
  int temp=nums[0];
  nums[0]=nums[2];
  nums[2]=nums[1];
  nums[2]=temp;
  
  return nums;
}
//maxEnd3
public int[] maxEnd3(int[] nums) {
  int larger=Math.max(nums[0],nums[2]);
  nums[0]=nums[1]=nums[2]=larger;
  return nums;
}
//sum2 
public int sum2(int[] nums) {
  if(nums.length==0){
    return 0;
  }
  else if(nums.length<2){
    return nums[0];
  }
  else{
    return nums[0]+nums[1];
  }
}
//middleWay
public int[] middleWay(int[] a, int[] b) {
  int[] ret = new int[2];
  ret[0]=a[1];
  ret[1]=b[1];
  return ret;
}
//makeEnds
public int[] makeEnds(int[] nums) {
  if(nums.length==1){
      int []a=new int[2];
      a[0]=nums[0];
      a[1]=nums[0];
      return a;
  }
  else{
    int a[] = new int[2];
    a[0]=nums[0];
    a[1]=nums[nums.length-1];
    return a;
  }
}
//has23
public boolean has23(int[] nums) {
  return (nums[0]==2 || nums[0]==3) || (nums[0]==3 || nums[1]==3);
}
//no23
public boolean no23(int[] nums) {
return nums[0] != 2 && nums[0] != 3 && nums[1] != 2 && nums[1] != 3;
}
//makeLast
public int[] makeLast(int[] nums) {
  int[] a = new int[nums.length*2];
  if(nums.length==1){
    a[1]=nums[nums.length-1];
  }
  else{
    a[a.length-1]=nums[nums.length-1];
  }
  
  return a;
}
//double23
public boolean double23(int[] nums) {
if (nums.length < 2)
	    return false;
if ((nums[0] == 2 && nums[1] == 2) || (nums[0] == 3 && nums[1] == 3))
	    return true;
else
	   return false;
}
//fix23
public int[] fix23(int[] nums) {
  if(nums[0]==2 && nums[1]==3){
    nums[1]=0;
    return nums;
  }
  else if(nums[1]==2 && nums[2]==3){
    nums[2]=0;
    return nums;
  }
  else{
    return nums;
  }
}
//start1
public int start1(int[] a, int[] b) {
  if(a.length==0 && b.length==0){
    return 0;
  }
  else if(a.length==0){
    if(b[0]==1){
      return 1;
    }
    else{
      return 0;
    }
  }
  else if(b.length==0){
    if(a[0]==1){
      return 1;
    }
    else{
      return 0;
    }
  }
  else{
    if(a[0]==1 && b[0]==1){
      return 2;
    }
    else if(a[0]==1 && b[0]!=1){
      return 1;
    }
    else if(b[0]==1 && a[0]!=1){
      return 1;
    }
    else{
      return 0;
    }
  }
}
//biggerTwo
public int[] biggerTwo(int[] a, int[] b) {
  int sum1=a[0]+a[1];
  int sum2=b[0]+b[1];
  
  if(sum1==sum2){
    return a;
  }
  else if(sum1>sum2){
    return a;
  }
  else{
    return b;
  }
}
//makeMiddle
public int[] makeMiddle(int[] nums) {
  int len=nums.length;
  if(len==2){
    return nums;
  }
  else{
    int[] a = new int[2];
    if(len%2==0){
      a[0]=nums[len/2-1];
      a[1]=nums[len/2];
    }
    else{
      a[0]=nums[len/2];
      a[1]=nums[len/2];
    }
    return a;
  }
  
}
//plusTwo
public int[] plusTwo(int[] a, int[] b) {
  int[] nums = new int [4];
  nums[0]=a[0];
  nums[1]=a[1];
  nums[2]=b[0];
  nums[3]=b[1];
  return nums;
}
//swapEnds
public int[] swapEnds(int[] nums) {
  if(nums.length==1){
    return nums;
  }
  else{
    int len=nums.length-1;
    int temp=nums[0];
    nums[0]=nums[len];
    nums[len]=temp;
    return nums;
  }
}
//midThree
public int[] midThree(int[] nums) {
  if(nums.length==3){
    return nums;
  }
  else{
    int len=nums.length-1;
    int[] a = new int[3];
    a[0]=nums[len/2-1];
    a[1]=nums[len/2];
    a[2]=nums[len/2+1];
    
    return a;
  }
}
//maxTriple
public int maxTriple(int[] nums) {
  if(nums.length==1){
    return nums[0];
  }
  else{
    int first=nums[0];
    int middle=nums[nums.length/2];
    int last=nums[nums.length-1];
    if(first>middle){
      if(first>last){
        return first;
      }
      else{
        return last;
      }
    }
    if(middle>last){
      return middle;
    }
    else{
      return last;
    }
  }
}
//frontPiece
public int[] frontPiece(int[] nums) {
  if(nums.length<2){
    return nums;
  }
  else{ 
    int[]a = new int[2];
    a[0]=nums[0];
    a[1]=nums[1];
    return a;return nums.substring(0,2);
  }
}
//unlucky1
public boolean unlucky1(int[] nums) {
  if(nums.length<=1){
    return false;
  }
  else if( nums[0]==1 && nums[1]==3 ||
        nums[1]==1 && nums[2]==3 ||
        (nums[nums.length-1]==3 && nums[nums.length-2]==1)
       ){
       return true;
  }
  else 
  return false;
}
//make2 
public int[] make2(int[] a, int[] b) {
int[] myArray = new int[2];
	  int aLen = a.length;
	  int bLen = b.length;
	  if (aLen == 0) {
	    myArray[0] = b[0];
	    myArray[1] = b[1];
	    return myArray;
	  } else if (aLen == 1 && bLen == 1) {
	    myArray[0] = a[0];
	    myArray[1] = b[0];
	    return myArray;
	  } else if (aLen == 1) {
	      myArray[0] = a[0];
	      myArray[1] = b[0];
	      return myArray; 
	  } else {
	      myArray[0] = a[0];
	      myArray[1] = a[1];
	      return myArray;
	  }
}
//front11
public int[] front11(int[] a, int[] b) {
  int[] ret=null;
  if(a.length==0  && b.length==0){
    return new int[]{};
  }
  if(a.length==0){
    ret=new int[1];
    ret[0]=b[0];
  }
  else if(b.length==0){
    ret = new int[1];
    ret[0]=a[0];
  }
  else{
    ret = new int[2];
    ret[0]=a[0];
    ret[1]=b[0];
  }
  return ret;
}




